##
#  Logging
##

https://docs.python.org/2/howto/logging.html
https://docs.python.org/2/howto/logging-cookbook.html
https://docs.python.org/2/library/logging.html

# dango and logging
https://docs.djangoproject.com/en/1.11/topics/logging/#examples
https://docs.python.org/3/library/logging.config.html#logging-config-dictschema

# how to integrate Logging into our django app.

# basic logging setup

###
#   update the 'development.py' under the src/AddressBook/settings/development.py
###

import logging

LOGGING = {
    'version':1,
    'disable_existing_loggers': False,     # set it as true, if you want other logger not to affect your application.
    									   # set it to false , if you want to integrate it to debugtool or something as such.
    'handlers':{
        'file':{
            'level':'DEBUG',
            'class':'logging.FileHandler',
            'filename': os.path.join(BASE_DIR,'logs/myaddress.log')
        },
    },

    'loggers':{
        'django.request':{
            'handlers':['file'],
            'level':'DEBUG',
            'propagate':True,

        },
    },
}

##
# Make necessary modification to your views.py
#
##

import logging

def address_form(request):
    form = AddressForm()
    context = {'form': form}

    if request.method == 'POST':
        # POST and FORM=VALID
        form = AddressForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            gender = form.cleaned_data['gender']
            logger.info("The form is valid with the entries - name:{},email:{},age:{}".format(name,email,gender)) # first logger
            # ORM related entry to create a new object
            Address_Detail.objects.create(name=name, email=email, gender=gender)
            logger.info("Entries made into the databases")    # second logger
            return HttpResponseRedirect('/thankyou/')
        else:
            # POST and FORM=INVALID
            #print request.method
            # print form.errors
            #print form
            logger.error("Form is not valid - {}".format(form))    # third logger
            context = {'form': form}
            return render(request, 'address/Address_form.html', context)
    # GET
    return render(request, 'address/Address_form.html', context)


 ###
 ## One more example of logging. Setting your ADMINS
 ##
 ####


 to send mails make sure your have smtp enable in your setting.py file.

 ### example for logging

 ## Logging setup
import logging

## Admins to whom you need to send an mail.
ADMINS = [('tuxfux','tuxfux.hlp@gmail.com')]

LOGGING = {
    'version':1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s" ,
            'datefmt' : '%d/%b/%Y %H:%M:%S',
        },

    },

    'handlers':{
        'null':{
            'level':'DEBUG',
            'class':'django.utils.log.NullHandler',
        },
   
        'logfile':{
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR,'logs/myaddress.log'),
            'maxBytes' : 50000,
            'backupCount':2,
            'formatter':'standard',
        },

        'console':{
             'level':'INFO',
             'class':'logging.StreamHandler',
             'formatter':'standard',
        },
        'mail_admins': {
            'level':'ERROR',
            'class':'django.utils.log.AdminEmailHandler',
            'formatter':'standard',
        },
    },
    

    'loggers':{
        'django':{
            'handlers':['console'],
            'level':'WARN',
            'propagate':True,
            },

        'django.db.backends':{
            'handlers' :['console'],
            'level' :'DEBUG',
            'propograte':False,

        },
        'ourapp':{
            'handlers':['mail_admins','logfile','console'],
            'level':'DEBUG',

        },


    },


}

###
# In your views to .py please setup this
#
###
# logging
import logging
# the below line is from first example.. just hashing it out for things to work.
#logger = logging.getLogger('django.request')
# the below edits are for second example.
logger1 = logging.getLogger('django') # console
logger2 = logging.getLogger('ourapp') # mail admin
logger3 = logging.getLogger('ourapp') # console and mail admins

# Day 8
# modular forms
# https://docs.djangoproject.com/en/1.10/ref/forms/validation/#form-and-field-validation
def address_form(request):
    form = AddressForm()
    context = {'form': form}

    if request.method == 'POST':
        # POST and FORM=VALID
        form = AddressForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            gender = form.cleaned_data['gender']
            #logger.info("The form is valid with the entries - name:{},email:{},age:{}".format(name,email,gender)) # from first example
            logger2.info("The form is valid with the entries - name:{},email:{},age:{}".format(name,email,gender))
            # ORM related entry to create a new object
            Address_Detail.objects.create(name=name, email=email, gender=gender)
            #logger.info("Entries made into the databases")  # from first example
            logger2.info("Entries made into the databases") 
            return HttpResponseRedirect('/thankyou/')
        else:
            # POST and FORM=INVALID
            #print request.method
            # print form.errors
            #print form
            #logger.error("Form is not valid - {}".format(form)) # example 1
            logger3.error("Form is not valid - {}".format(form))
            context = {'form': form}
            return render(request, 'address/Address_form.html', context)
    # GET
    return render(request, 'address/Address_form.html', context)