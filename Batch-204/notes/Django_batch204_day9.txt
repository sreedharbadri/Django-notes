
###
# FORMS
###

###
# contact form
####

1) create the forms.py in your blog/forms.py

- src/blog/forms.py

from django import forms

class ContactForm(forms.Form):
	contact_name = forms.CharField(max_length=5,required=True)
	contact_email = forms.EmailField(required=True)
	content = forms.CharField(
		widget = forms.Textarea
		)

reference:

https://docs.djangoproject.com/en/1.11/ref/forms/fields/
https://docs.djangoproject.com/en/1.11/ref/forms/widgets/

2) we need to create a url for the forms.py 

- src/blog/urls.py


from django.conf.urls import include, url
from .views import Hello,TestHello,StaticHello
from .views import contact


urlpatterns = [
    url(r'^$', Hello, name='Hello'),
    url(r'^test/', TestHello, name='Hello'),
     url(r'^testme/', StaticHello, name='StaticHello'),
     url(r'^contact/',contact,name='contact'),
]


3) create a view for your contact/ url link.

- src/blog/views.py

def contact(request):
	form_class = ContactForm  # class not a instance
	context = {'form':form_class}
	return render(request,'blog/contact.html',context)


4) Lets create the contact page - src/blog/templates/blog/contact.html

<html>
<head>  
<title>
Please Join Us
</title> 
</head>
<form role="form" action="" method="post">
{{ form.as_p}}
<button type="submit">submit</button>
</form>
</html>

5) when i hit the submit button - http://127.0.0.1:8000/blog/contact/

i get the below error.

----------------------------------------------------------------
Forbidden (403)

CSRF verification failed. Request aborted.
Help

Reason given for failure:

    CSRF token missing or incorrect.
    

In general, this can occur when there is a genuine Cross Site Request Forgery, or when Django's CSRF mechanism has not been used correctly. For POST forms, you need to ensure:

    Your browser is accepting cookies.
    The view function passes a request to the template's render method.
    In the template, there is a {% csrf_token %} template tag inside each POST form that targets an internal URL.
    If you are not using CsrfViewMiddleware, then you must use csrf_protect on any views that use the csrf_token template tag, as well as those that accept the POST data.

You're seeing the help section of this page because you have DEBUG = True in your Django settings file. Change that to False, and only the initial error message will be displayed.

You can customize this page using the CSRF_FAILURE_VIEW setting.
------------------------------------------------------------------

6) we can add the {% csrf_token %} into the http://127.0.0.1:8000/blog/contact/.

<html>
<head>  
<title>
Please Join Us
</title> 
</head>
<form role="form" action="" method="post">
{% csrf_token %}
{{ form.as_p}}
<button type="submit">submit</button>
</form>
</html>


####
# how to send a email from a form to my email address.
####

1) we need to add the gmail relative setting in your settings.py file - /src/mysite/settings.py

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = ''  # fill with your email address
EMAIL_HOST_PASSWORD = '' # fill with your password.
EMAIL_PORT = 587
EMAIL_USE_TLS = True

2) For thanking for updating the contact page create a thankyou url and also a thankyou view.

- src/blog/views.py

from django.http import HttpResponse,HttpResponseRedirect

# Thank you
def Thanks(request):
    return HttpResponse("Thank you and Have a great day!!!")

- src/blog/urls.py

from .views import contact,Thanks
urlpatterns = [
    url(r'^$', Hello, name='Hello'),
    url(r'^test/', TestHello, name='Hello'),
     url(r'^testme/', StaticHello, name='StaticHello'),
     url(r'^contact/',contact,name='contact'),
      url(r'^thanks/',Thanks,name='thanks'),
]

3) Make some modification to your contact view.

- src/blog/views.py

# https://docs.djangoproject.com/en/1.11/topics/forms/#the-view
# https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.cleaned_data
# https://docs.djangoproject.com/en/1.11/topics/email/
def contact(request):

    # GET REQUEST
    form_class = ContactForm  # class not a instance
    context = {'form':form_class}
    
    # POST REQUEST
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            contact_name = form.cleaned_data['contact_name']
            contact_email = form.cleaned_data['contact_email']
            content = form.cleaned_data['content']
            subject = "A new contact or lead - {}".format(contact_name)
            email = EmailMessage(subject, contact_name + '\n' + contact_email + '\n' + content , to=['tuxfux.hlp@gmail.com'])
            email.send()
            return HttpResponseRedirect('/blog/thanks/')            
    return render(request,'blog/contact.html',context)

4) Demonstration

1) when you open this link you should see a GET request

http://127.0.0.1:8000/blog/contact/
[23/Sep/2017 02:51:18]"GET /blog/contact/ HTTP/1.1" 200 629

2) when you hit the submit button you should see a POST request.
http://127.0.0.1:8000/blog/contact/
[23/Sep/2017 02:52:49]"POST /blog/contact/ HTTP/1.1" 200 629

3) When you fill the data and hit on submit button you should get the thankyou url and a mail to your email address.


References:
https://docs.djangoproject.com/en/1.11/topics/forms/#building-a-form-in-django
https://docs.djangoproject.com/en/1.11/topics/forms/#the-view
https://docs.djangoproject.com/en/1.11/topics/forms/
https://docs.djangoproject.com/en/1.11/ref/forms/fields/
https://docs.djangoproject.com/en/1.11/ref/forms/widgets/

## email.
# https://docs.djangoproject.com/en/1.11/topics/forms/#the-view
# https://docs.djangoproject.com/en/1.11/ref/forms/api/#django.forms.Form.cleaned_data
# https://docs.djangoproject.com/en/1.11/topics/email/